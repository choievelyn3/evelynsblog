[
  {
    "objectID": "DH140ProjectIntroduction.html",
    "href": "DH140ProjectIntroduction.html",
    "title": "evelynsblog",
    "section": "",
    "text": "DH 140 Final Project:\nDescription of Data: I will be primarily focusing on ‘Pride and Prejudice’ by Jane Austen from Project Gutenberg.\n\nimport requests\n\n\ntarget_url = \"https://www.gutenberg.org/files/1342/1342-0.txt\"\nresponse = requests.get(target_url)\npnp_string = response.text\npnp_string = pnp_string.split('*** START OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[1]\npnp_string = pnp_string.split('*** END OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[0]\npnp_string = pnp_string.lower()\n\nMy motivation with this project is to analyze the language and the sentiment of the various characters in Pride and Prejudice. I want to understand how much influence language and the sentiment have on the characters and the overall story.\n\n\nQuestions:\nA few questions that I hope to answer through my project are:\n\nWhich words appear frequently in Pride and Prejudice?\nHow does Elizabeth Bennet’s and Mr. Darcy’s relationship develop as the story progresses?- Why do different genders in Pride and Prejudice speak differently, and how does this effect the novel’s overall tone and message?\nWhat significant events cause shifts in how people feel in Pride and Prejudice, and what causes those shifts to occur?\nHow do the sentiments of Pride and Prejudice’s various social classes vary?\nHow can certain words or word categories help to develop the ideas of Pride and Prejudice?\nHow does Pride and Prejudice’s evolving main characters and their relationship with one another shape the novel’s tone?\nWhat are some similarities and differences in the language and emotion used by the various characters in Pride and Prejudice, and how do these elements develop over the novel?\n\n\n\nAdditional Sources:\n\nhttps://www.nytimes.com/2017/07/06/upshot/the-word-choices-that-explain-why-jane-austen-endures.html\nRunge, Laura L. “Austen and Computation 2.0.” Texas Studies in Literature & Language, vol. 61, no. 4, Winter 2019, pp. 397–415. EBSCOhost, https://doi.org/10.7560/tsll61405.\nhttps://datascientistdiary.com/index.php/2021/02/04/introduction-to-text-mining-and-sentiment-analysis-in-r-with-jane-austens-novels/"
  },
  {
    "objectID": "posts/DH140ProjectIntroduction.html",
    "href": "posts/DH140ProjectIntroduction.html",
    "title": "evelynsblog",
    "section": "",
    "text": "DH 140 Final Project:\nDescription of Data: I will be primarily focusing on ‘Pride and Prejudice’ by Jane Austen from Project Gutenberg.\n\nimport requests\n\n\ntarget_url = \"https://www.gutenberg.org/files/1342/1342-0.txt\"\nresponse = requests.get(target_url)\npnp_string = response.text\npnp_string = pnp_string.split('*** START OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[1]\npnp_string = pnp_string.split('*** END OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[0]\npnp_string = pnp_string.lower()\n\nMy motivation with this project is to analyze the language and the sentiment of the various characters in Pride and Prejudice. I want to understand how much influence language and the sentiment have on the characters and the overall story.\n\n\nQuestions:\nA few questions that I hope to answer through my project are:\n\nWhich words appear frequently in Pride and Prejudice?\nHow does Elizabeth Bennet’s and Mr. Darcy’s relationship develop as the story progresses?- Why do different genders in Pride and Prejudice speak differently, and how does this effect the novel’s overall tone and message?\nWhat significant events cause shifts in how people feel in Pride and Prejudice, and what causes those shifts to occur?\nHow do the sentiments of Pride and Prejudice’s various social classes vary?\nHow can certain words or word categories help to develop the ideas of Pride and Prejudice?\nHow does Pride and Prejudice’s evolving main characters and their relationship with one another shape the novel’s tone?\nWhat are some similarities and differences in the language and emotion used by the various characters in Pride and Prejudice, and how do these elements develop over the novel?\n\n\n\nAdditional Sources:\n\nhttps://www.nytimes.com/2017/07/06/upshot/the-word-choices-that-explain-why-jane-austen-endures.html\nRunge, Laura L. “Austen and Computation 2.0.” Texas Studies in Literature & Language, vol. 61, no. 4, Winter 2019, pp. 397–415. EBSCOhost, https://doi.org/10.7560/tsll61405.\nhttps://datascientistdiary.com/index.php/2021/02/04/introduction-to-text-mining-and-sentiment-analysis-in-r-with-jane-austens-novels/"
  },
  {
    "objectID": "posts/DataPreProcessingandInformation/DataPreprocessingandInformation.html",
    "href": "posts/DataPreProcessingandInformation/DataPreprocessingandInformation.html",
    "title": "Data Pre-Processing and Information",
    "section": "",
    "text": "import pandas as pd\nimport requests\nimport matplotlib.pyplot as plt\nimport nltk\nfrom string import punctuation\n\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.sentiment import vader\nfrom nltk.corpus import sentiwordnet as swn\nfrom nltk.stem.lancaster import LancasterStemmer\nimport networkx as nx\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\nnltk.download('opinion_lexicon')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n\n[nltk_data] Downloading package punkt to /home/jovyan/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n[nltk_data] Downloading package averaged_perceptron_tagger to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n[nltk_data] Downloading package wordnet to /home/jovyan/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n\n\nTrue\n\n\n\ntarget_url = \"https://www.gutenberg.org/files/1342/1342-0.txt\"\nresponse = requests.get(target_url)\npnp_string = response.text\npnp_string = pnp_string.split('*** START OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[1]\npnp_string = pnp_string.split('*** END OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[0]\npnp_string = pnp_string.lower()\n\n\nstop = stopwords.words('english')\nprint(stop)\nmyStopWords = list(punctuation) + stopwords.words('english')\nsia = vader.SentimentIntensityAnalyzer()\npnp_words = word_tokenize(pnp_string)\n\n['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"]\n\n\n\nJane Austen Data Summary:\nTotal Number of Novels: 4\nPride and Prejudice: - total number of chapters: 61 - total number of words: 156,644 words\nThe datasets are directly from Project Gutenberg, which houses public domain novels. Therefore, I assume that the data is accurate.\nFor data preprocessing, I will be removing any stopwords, unneccessary characters, and make the entire text lowercase to easily process the data.\n\n\nExploratory Data Visualization:\n\n# 1. Positive/negative words for Pride and Prejudice:\n\npositive_words = []\nnegative_words = []\nneutral_words = []\n\nfor word in pnp_words:\n  scores = sia.polarity_scores(word)\n  if scores ['compound'] == 0:\n    neutral_words.append(word)\n  elif scores ['compound'] > 0:\n    positive_words.append(word)\n  elif scores ['compound'] < 0:\n    negative_words.append(word)\n\npos_freq = nltk.FreqDist(positive_words)\nneg_freq = nltk.FreqDist(negative_words)\n\nmost_common_positive = pos_freq.most_common(15)\nmost_common_negative = neg_freq.most_common(15)\n\nplt.barh(range(len(most_common_positive)), [val[1] for val in most_common_positive])\nplt.yticks(range(len(most_common_positive)), [val[0] for val in most_common_positive])\nplt.xlabel('Frequency of Words')\nplt.title('Most Common Positive Words in Pride and Prejudice')\nplt.show()\n\nplt.barh(range(len(most_common_negative)), [val[1] for val in most_common_negative])\nplt.yticks(range(len(most_common_negative)), [val[0] for val in most_common_negative])\nplt.xlabel('Frequency of Words')\nplt.title('Most Common Negative Words in Pride and Prejudice')\nplt.show()\n\n\n\n\n\n\n\n\n# 2. Word Frequency for Pride and Prejudice\n\npnp_words = word_tokenize(pnp_string)\nmyStopWords = list(punctuation) + stopwords.words('english')\nwordsNoStop = []\n\nfor i in pnp_words:\n    if i not in myStopWords:\n        wordsNoStop.append(i)\n\nporterstem_words = []\nfor w in wordsNoStop:\n    porterstem_words.append(PorterStemmer().stem(w))\n\nprint(nltk.FreqDist(porterstem_words).most_common(40))\n\ndf = pd.DataFrame({'words': nltk.FreqDist(porterstem_words).keys(),\n                   'frequencies': nltk.FreqDist(porterstem_words).values()}) \n\ndf['frequencies'].plot(kind = 'hist', bins=7)\nplt.xlabel('Frequency')\nplt.ylabel('Count')\nplt.title('Word Frequencies in Pride and Prejudice')\nplt.show()\n\n[('mr.', 789), ('â\\x80\\x9d', 789), ('elizabeth', 602), ('could', 527), ('--', 498), ('would', 480), ('said', 406), ('darci', 377), ('mrs.', 346), ('much', 331), ('â\\x80\\x9ci', 322), ('bennet', 314), ('must', 310), ('miss', 308), ('one', 285), ('know', 274), ('jane', 270), ('bingley', 263), ('ladi', 256), ('sister', 247), ('think', 244), ('though', 234), ('never', 227), ('time', 219), ('see', 217), ('soon', 214), ('make', 210), ('say', 205), ('might', 204), ('may', 197), ('well', 191), ('littl', 188), ('everi', 185), ('wish', 184), ('noth', 183), ('look', 177), ('good', 174), ('without', 173), ('even', 173), ('hope', 172)]\n\n\n\n\n\n\n# 3. Most Common Adjectives\n\npnp_words = word_tokenize(pnp_string)\n\nwordLancasterStems = []\nfor w in pnp_words:\n    stemmer = LancasterStemmer()\n    wordLancasterStems.append(stemmer.stem(w))\n\nwordPorterStems = []\nfor w in pnp_words:\n    stemmer = PorterStemmer()\n    wordPorterStems.append(stemmer.stem(w))\n\npnp_pos = nltk.pos_tag(pnp_words)\n\nadjectives = []\nfor word in pnp_pos:\n    if word[1] in ['JJ', 'JJS', 'JJR']:\n        adjectives.append(word[0])\n\npnp_freqdist = nltk.FreqDist(adjectives)\n\npnp_freqdist = nltk.FreqDist(adjectives)\ndf = pd.DataFrame(list(pnp_freqdist.items()), columns=['Word', 'Frequency'])\ndf = df.sort_values('Frequency', ascending=False)\n\nplt.figure(figsize=(10, 5))\nplt.bar(df['Word'][:10], df['Frequency'][:10])\nplt.title('Most Common Adjectives')\nplt.xlabel('Adjective')\nplt.ylabel('Frequency')\nplt.show()\n\n/tmp/ipykernel_88/2555601944.py:29: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n  plt.bar(df['Word'][:10], df['Frequency'][:10])\n\n\n\n\n\n\n# 4. Character Network Visualization\n\nG = nx.Graph()\n\ncharacters = ['Mr. Darcy', 'Mr. Bingley', 'Elizabeth Bennet', 'Jane Bennet', 'George Wickham', 'Mr. Collins', 'Charlotte Lucas', 'Lydia Bennet', 'Lady Catherine de Bourgh']\nG.add_nodes_from(characters)\n\nG.add_edges_from([('Mr. Darcy', 'George Wickham'), ('Mr. Darcy', 'Elizabeth Bennet'), ('Mr. Bingley', 'Jane Bennet'), ('Mr. Bingley', 'Mr. Darcy'), ('Mr. Collins', 'Charlotte Lucas'), ('Elizabeth Bennet', 'Charlotte Lucas'), ('Lydia Bennet', 'George Wickham'), ('Mr. Collins', 'Elizabeth Bennet'), ('Lady Catherine de Bourgh', 'Mr. Collins'), ('Lady Catherine de Bourgh', 'Mr. Darcy'), ('Elizabeth Bennet', 'Lydia Bennet'), ('Jane Bennet', 'Elizabeth Bennet'), ('Jane Bennet', 'Lydia Bennet'), ('Lady Catherine de Bourgh', 'Elizabeth Bennet')])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\n\nBeginnings of analysis\nI made four visualizations to display word use, character networks, adjective frequency, and positive and negative words. To further prepare the data for analysis, I removed punctuation and made the text all lowercase. In text analysis, this is a popular first step that helps get rid of clutter that doesn’t add any value to the research. The next step I could take would be examining the visuals to learn more about the story’s characters, their motivations, and the language they use.\n\n\nAdditional 4 data Visualizations I’m interested in making\n\na visualization that compares the language spoken by characters of different social classes\nsentiment analysis of part 1 and part 2 and how the tone shifts\ncertain character interactions shift the tone of the novel, like for example, Lydia and Wickham’s elopement\ntextual analysis on different romantic relationships between couples in the novel, like Darcy and Elizabeth with Mr. Collins and Elizabeth"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/first_file.html",
    "href": "posts/first_file.html",
    "title": "First File",
    "section": "",
    "text": "2+2\n\n4"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/DH140ProjectIntroduction/DH140ProjectIntroduction.html",
    "href": "posts/DH140ProjectIntroduction/DH140ProjectIntroduction.html",
    "title": "DH 140 Project Introduction",
    "section": "",
    "text": "import requests\n\n\ntarget_url = \"https://www.gutenberg.org/files/1342/1342-0.txt\"\nresponse = requests.get(target_url)\npnp_string = response.text\npnp_string = pnp_string.split('*** START OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[1]\npnp_string = pnp_string.split('*** END OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[0]\npnp_string = pnp_string.lower()\n\nMy motivation with this project is to analyze the language and the sentiment of the various characters in Pride and Prejudice. I want to understand how much influence language and the sentiment have on the characters and the overall story.\n\nQuestions:\nA few questions that I hope to answer through my project are:\n\nWhich words appear frequently in Pride and Prejudice?\nHow does Elizabeth Bennet’s and Mr. Darcy’s relationship develop as the story progresses?- Why do different genders in Pride and Prejudice speak differently, and how does this effect the novel’s overall tone and message?\nWhat significant events cause shifts in how people feel in Pride and Prejudice, and what causes those shifts to occur?\nHow do the sentiments of Pride and Prejudice’s various social classes vary?\nHow can certain words or word categories help to develop the ideas of Pride and Prejudice?\nHow does Pride and Prejudice’s evolving main characters and their relationship with one another shape the novel’s tone?\nWhat are some similarities and differences in the language and emotion used by the various characters in Pride and Prejudice, and how do these elements develop over the novel?\n\n\n\nAdditional Sources:\n\nhttps://www.nytimes.com/2017/07/06/upshot/the-word-choices-that-explain-why-jane-austen-endures.html\nRunge, Laura L. “Austen and Computation 2.0.” Texas Studies in Literature & Language, vol. 61, no. 4, Winter 2019, pp. 397–415. EBSCOhost, https://doi.org/10.7560/tsll61405.\nhttps://datascientistdiary.com/index.php/2021/02/04/introduction-to-text-mining-and-sentiment-analysis-in-r-with-jane-austens-novels/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "DataPreprocessingandInformation.html",
    "href": "DataPreprocessingandInformation.html",
    "title": "evelynsblog",
    "section": "",
    "text": "import pandas as pd\nimport requests\nimport matplotlib.pyplot as plt\nimport nltk\nfrom string import punctuation\n\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom nltk.sentiment import vader\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import opinion_lexicon\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.sentiment import vader\nfrom nltk.corpus import sentiwordnet as swn\nfrom nltk.stem.lancaster import LancasterStemmer\nimport networkx as nx\n\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\nnltk.download('opinion_lexicon')\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')\n\n[nltk_data] Downloading package punkt to /home/jovyan/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n[nltk_data] Downloading package opinion_lexicon to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package opinion_lexicon is already up-to-date!\n[nltk_data] Downloading package averaged_perceptron_tagger to\n[nltk_data]     /home/jovyan/nltk_data...\n[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n[nltk_data]       date!\n[nltk_data] Downloading package wordnet to /home/jovyan/nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n\n\nTrue\n\n\n\ntarget_url = \"https://www.gutenberg.org/files/1342/1342-0.txt\"\nresponse = requests.get(target_url)\npnp_string = response.text\npnp_string = pnp_string.split('*** START OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[1]\npnp_string = pnp_string.split('*** END OF THE PROJECT GUTENBERG EBOOK PRIDE AND PREJUDICE ***')[0]\npnp_string = pnp_string.lower()\n\n\nstop = stopwords.words('english')\nprint(stop)\nmyStopWords = list(punctuation) + stopwords.words('english')\nsia = vader.SentimentIntensityAnalyzer()\npnp_words = word_tokenize(pnp_string)\n\n['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\", \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn', \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn', \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", 'won', \"won't\", 'wouldn', \"wouldn't\"]\n\n\n\nJane Austen Data Summary:\nTotal Number of Novels: 4\nPride and Prejudice: - total number of chapters: 61 - total number of words: 156,644 words\nThe datasets are directly from Project Gutenberg, which houses public domain novels. Therefore, I assume that the data is accurate.\nFor data preprocessing, I will be removing any stopwords, unneccessary characters, and make the entire text lowercase to easily process the data.\n\n\nExploratory Data Visualization:\n\n# 1. Positive/negative words for Pride and Prejudice:\n\npositive_words = []\nnegative_words = []\nneutral_words = []\n\nfor word in pnp_words:\n  scores = sia.polarity_scores(word)\n  if scores ['compound'] == 0:\n    neutral_words.append(word)\n  elif scores ['compound'] > 0:\n    positive_words.append(word)\n  elif scores ['compound'] < 0:\n    negative_words.append(word)\n\npos_freq = nltk.FreqDist(positive_words)\nneg_freq = nltk.FreqDist(negative_words)\n\nmost_common_positive = pos_freq.most_common(15)\nmost_common_negative = neg_freq.most_common(15)\n\nplt.barh(range(len(most_common_positive)), [val[1] for val in most_common_positive])\nplt.yticks(range(len(most_common_positive)), [val[0] for val in most_common_positive])\nplt.xlabel('Frequency of Words')\nplt.title('Most Common Positive Words in Pride and Prejudice')\nplt.show()\n\nplt.barh(range(len(most_common_negative)), [val[1] for val in most_common_negative])\nplt.yticks(range(len(most_common_negative)), [val[0] for val in most_common_negative])\nplt.xlabel('Frequency of Words')\nplt.title('Most Common Negative Words in Pride and Prejudice')\nplt.show()\n\n\n\n\n\n\n\n\n# 2. Word Frequency for Pride and Prejudice\n\npnp_words = word_tokenize(pnp_string)\nmyStopWords = list(punctuation) + stopwords.words('english')\nwordsNoStop = []\nfor i in pnp_words:\n    if i not in myStopWords:\n        wordsNoStop.append(i)\nwordsNoStopComp = [w for w in pnp_words if w not in myStopWords]\npnp_words = [PorterStemmer().stem(w) for w in wordsNoStopComp]\n\nprint(nltk.FreqDist(pnp_words).most_common(40))\n\ndf = pd.DataFrame({'words': nltk.FreqDist(pnp_words).keys(),\n                   'frequencies': nltk.FreqDist(pnp_words).values()}) \n\ndf['frequencies'].plot(kind = 'hist', bins=7)\nplt.xlabel('Frequency')\nplt.ylabel('Count')\nplt.title('Word Frequencies in Pride and Prejudice')\nplt.show()\n\n[('mr.', 789), ('â\\x80\\x9d', 789), ('elizabeth', 602), ('could', 527), ('--', 498), ('would', 480), ('said', 406), ('darci', 377), ('mrs.', 346), ('much', 331), ('â\\x80\\x9ci', 322), ('bennet', 314), ('must', 310), ('miss', 308), ('one', 285), ('know', 274), ('jane', 270), ('bingley', 263), ('ladi', 256), ('sister', 247), ('think', 244), ('though', 234), ('never', 227), ('time', 219), ('see', 217), ('soon', 214), ('make', 210), ('say', 205), ('might', 204), ('may', 197), ('well', 191), ('littl', 188), ('everi', 185), ('wish', 184), ('noth', 183), ('look', 177), ('good', 174), ('without', 173), ('even', 173), ('hope', 172)]\n\n\n\n\n\n\n# 3. Most Common Adjectives\n\npnp_words = word_tokenize(pnp_string)\nwordLancasterStems = [LancasterStemmer().stem(w) for w in pnp_words]\nwordPorterStems = [PorterStemmer().stem(w) for w in pnp_words]\n\npnp_pos = nltk.pos_tag(pnp_words)\n\nadjectives = [word[0] for word in pnp_pos if word[1] in ['JJ', 'JJS', 'JJR']]\npnp_freqdist = nltk.FreqDist(adjectives)\ndf = pd.DataFrame(list(pnp_freqdist.items()), columns=['Word', 'Frequency'])\ndf = df.sort_values('Frequency', ascending=False)\n\nplt.figure(figsize=(10, 5))\nplt.bar(df['Word'][:10], df['Frequency'][:10])\nplt.title('Most Common Adjectives')\nplt.xlabel('Adjective')\nplt.ylabel('Frequency')\nplt.show()\n\n/tmp/ipykernel_239/692061512.py:15: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n  plt.bar(df['Word'][:10], df['Frequency'][:10])\n\n\n\n\n\n\n# 4. Character Network Visualization\n\nG = nx.Graph()\n\ncharacters = ['Mr. Darcy', 'Mr. Bingley', 'Elizabeth Bennet', 'Jane Bennet', 'George Wickham', 'Mr. Collins', 'Charlotte Lucas', 'Lydia Bennet', 'Lady Catherine de Bourgh']\nG.add_nodes_from(characters)\n\nG.add_edges_from([('Mr. Darcy', 'George Wickham'), ('Mr. Darcy', 'Elizabeth Bennet'), ('Mr. Bingley', 'Jane Bennet'), ('Mr. Bingley', 'Mr. Darcy'), ('Mr. Collins', 'Charlotte Lucas'), ('Elizabeth Bennet', 'Charlotte Lucas'), ('Lydia Bennet', 'George Wickham'), ('Mr. Collins', 'Elizabeth Bennet'), ('Lady Catherine de Bourgh', 'Mr. Collins'), ('Lady Catherine de Bourgh', 'Mr. Darcy'), ('Elizabeth Bennet', 'Lydia Bennet'), ('Jane Bennet', 'Elizabeth Bennet'), ('Jane Bennet', 'Lydia Bennet'), ('Lady Catherine de Bourgh', 'Elizabeth Bennet')])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\n\nBeginnings of analysis\nI made four visualizations to display word use, character networks, adjective frequency, and positive and negative words. To further prepare the data for analysis, I removed punctuation and made the text all lowercase. In text analysis, this is a popular first step that helps get rid of clutter that doesn’t add any value to the research. The next step I could take would be examining the visuals to learn more about the story’s characters, their motivations, and the language they use.\n\n\nAdditional 4 data Visualizations I’m interested in making\n\na visualization that compares the language spoken by characters of different social classes\nsentiment analysis of part 1 and part 2 and how the tone shifts\ncertain character interactions shift the tone of the novel, like for example, Lydia and Wickham’s elopement\ntextual analysis on different romantic relationships between couples in the novel, like Darcy and Elizabeth with Mr. Collins and Elizabeth"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "evelynsblog",
    "section": "",
    "text": "DH 140 Final Project:\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst File\n\n\n\n\n\nTesting Quarto\n\n\n\n\n\n\nMar 14, 2023\n\n\nEvelyn Choi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Pre-Processing and Information\n\n\n\n\n\n\n\ncode\n\n\n\n\nBelow is my data pre-processed, along with 4 data visualizations.\n\n\n\n\n\n\nMar 13, 2023\n\n\nEvelyn Choi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDH 140 Project Introduction\n\n\n\n\n\n\n\nIntroduction\n\n\n\n\nI will be primarily focusing on ‘Pride and Prejudice’ by Jane Austen from Project Gutenberg.\n\n\n\n\n\n\nMar 13, 2023\n\n\nEvelyn Choi\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 12, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]